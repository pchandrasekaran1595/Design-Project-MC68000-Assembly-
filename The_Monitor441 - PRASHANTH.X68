       ORG $1000
PROMPT DC.B 'MONITOR441 > ',0
STACK EQU $3000
IP_BUFFER DS.B 80
A2ADDRS EQU $2C00
SPACE DC.B ' ',0 
HELPMSG_1  DC.B 'AVAILABLE COMMANDS AND THEIR USAGE',0
HELPMSG_2  DC.B 'MEMORY DISPLAY ---> MDSP <ADDRS> <SPACE> OR MDSP <ADDRS1> <ADDRS2> <SPACE>',0
HELPMSG_3  DC.B 'SORTING MEMORY ---> SORTW <ADDRS1> <ADDRS2> <ORDER (A OR D)>',0
HELPMSG_4  DC.B 'MEMORY MODIFY  ---> MM <ADDRS>;<SIZE> (B OR W OR L)',0
HELPMSG_5  DC.B 'MEMORY SET     ---> MS <ADDRS> <DATA> ',0
HELPMSG_6  DC.B 'BLOCK FILL     ---> BF <ADDRS1> <ADDRS2>',0
HELPMSG_7  DC.B 'BLOCK MOVE     ---> BMOV <ADDRS1> <ADDRS2> <N>',0
HELPMSG_8  DC.B 'BLOCK TEST     ---> BTST <ADDRS1> <ADDRS2> <SPACE>',0
HELPMSG_9  DC.B 'BLOCK SEARCH   ---> BSCH <ADDRS1> <ADDRS2>',0
HELPMSG_10 DC.B 'GO             ---> GO <ADDRS>',0
HELPMSG_11 DC.B 'DF             ---> DF',0
HELPMSG_12 DC.B 'REGISTER MODIFY---> RM .<D REGISTER> <LONGWORD DATA> ',0
HELPMSG_13 DC.B 'DATA CONVERT   ---> DCON <D OR H> <DATA> <SPACE> ',0
HELPMSG_14 DC.B 'EXIT           ---> EXIT',0
BSCHMSG_2 DC.B 'ADDRESS :',0
BSCHMSG_1 DC.B 'DATA    :',0
BSCHMSG_3 DC.B 'DATA NOT FOUND. PLEASE TRY AGAIN.',0
BTSTMSG_1 DC.B 'MEMORY TEST PASSED WITH NO ERRORS',0
BTSTMSG_2 DC.B 'ERROR',0
BTSTMSG_3 DC.B 'DATA WRITTEN = ',0
BTSTMSG_4 DC.B 'DATA READ    = ',0
BTSTMSG_5 DC.B 'ADDRESS      = ',0
DCONMSG_1 DC.B 'DECIMAL = ',0
DCONMSG_2 DC.B 'HEXADECIMAL = ',0
GOMSG DC.B 'PUT USER PROGRAM HERE',0
EXITMSG DC.B 'EXITING MONITOR PROGRAM',0
INVALID_MSG DC.B 'INVALID COMMAND. PLEASE TRY AGAIN. REFER TO USERS MANUAL FOR CORRECT USAGE.',0
BERR_MSG  DC.B 'BUS ERROR EXCEPTION',0
AERR_MSG  DC.B 'ADDRESS ERROR EXCEPTION',0
ILLERR_MSG  DC.B 'ILLEGAL INSTRUCTION EXCEPTION',0
PRIVERR_MSG  DC.B 'PRIVILEGE VIOLATION EXCEPTION',0
DIVZERR_MSG  DC.B 'DIVIDE BY ZERO EXCEPTION',0
CHKERR_MSG DC.B 'CHK INSTRUCTION EXCEPTION',0
LINEAERR_MSG DC.B 'LINE A EMULATOR',0
LINEFERR_MSG DC.B 'LINE F EMULATOR',0
ADDRREG_0 DC.B 'A0 = ',0
ADDRREG_1 DC.B 'A1 = ',0
ADDRREG_2 DC.B 'A2 = ',0
ADDRREG_3 DC.B 'A3 = ',0
ADDRREG_4 DC.B 'A4 = ',0
ADDRREG_5 DC.B 'A5 = ',0
ADDRREG_6 DC.B 'A6 = ',0
ADDRREG_7 DC.B 'A7 = ',0
DATAREG_0 DC.B 'D0 = ',0
DATAREG_1 DC.B 'D1 = ',0
DATAREG_2 DC.B 'D2 = ',0
DATAREG_3 DC.B 'D3 = ',0
DATAREG_4 DC.B 'D4 = ',0
DATAREG_5 DC.B 'D5 = ',0
DATAREG_6 DC.B 'D6 = ',0
DATAREG_7 DC.B 'D7 = ',0
PROGCOUNT DC.B 'PC = ',0
STATUSREG DC.B 'SR = ',0
CMDTABLE
    DC.B 'HELP  '
    DC.B 'MDSP  '
    DC.B 'SORTW ' 
    DC.B 'MM    '
    DC.B 'MS    '
    DC.B 'BF    '
    DC.B 'BMOV  '
    DC.B 'BTST  '
    DC.B 'BSCH  '
    DC.B 'GO    '
    DC.B 'DF    '
    DC.B 'RM    '
    DC.B 'DCON  '
    DC.B 'EXIT  '
CMDADDRS
    DC.W HELP
    DC.W MDSP
    DC.W SORTW
    DC.W MM
    DC.W MS
    DC.W BF
    DC.W BMOV
    DC.W BTST
    DC.W BSCH
    DC.W GO
    DC.W DF
    DC.W RM
    DC.W DCON
    DC.W EXIT    

HELP:
    MOVEM.L D0/A1,-(SP) 
    LEA SPACE,A1
    JSR DISPCR
    LEA HELPMSG_1,A1
    JSR DISPCR
    LEA HELPMSG_2,A1
    JSR DISPCR
    LEA HELPMSG_3,A1
    JSR DISPCR
    LEA HELPMSG_4,A1
    JSR DISPCR
    LEA HELPMSG_5,A1
    JSR DISPCR
    LEA HELPMSG_6,A1
    JSR DISPCR
    LEA HELPMSG_7,A1
    JSR DISPCR
    LEA HELPMSG_8,A1
    JSR DISPCR
    LEA HELPMSG_9,A1
    JSR DISPCR
    LEA HELPMSG_10,A1
    JSR DISPCR
    LEA HELPMSG_11,A1
    JSR DISPCR
    LEA HELPMSG_12,A1
    JSR DISPCR
    LEA HELPMSG_13,A1
    JSR DISPCR
    LEA HELPMSG_14,A1
    JSR DISPCR
    LEA SPACE,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    RTS
    
MDSP:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ MDSP_NEXT
    JMP MDSP_INVALID
MDSP_NEXT: JSR GET_ADDR_ASCII 
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ MDSP_3
    CMPI.B #$04,D4
    BEQ MDSP_4
    CMPI.B #$05,D4
    BEQ MDSP_5
MDSP_3:    CMPI.B #$0C,D3
    BGT MDSP_3RANGE
    JSR CONV_3
    MOVE.W D6,A5
    MOVE.L A5,A6
    ADD.L #$0F,A6
    JMP MDSP_DIS
MDSP_3RANGE:    ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ GET_NEXT_ADDR3
    JMP MDSP_INVALID 
GET_NEXT_ADDR3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    MOVE.L D6,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_3
    MOVE.W D6,A6
    JMP MDSP_DIS   
MDSP_4:    CMPI.B #$0C,D3
    BGT MDSP_4RANGE
    JSR CONV_4
    MOVE.L D7,A5
    MOVE.L A5,A6
    ADD.L #$0F,A6
    JMP MDSP_DIS
MDSP_4RANGE:    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ GET_NEXT_ADDR4
    JMP MDSP_INVALID 
GET_NEXT_ADDR4:    JSR GET_ADDR_ASCII 
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4     
    MOVE.L D7,A5
    MOVE.L D7,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_4
    MOVE.L D7,A6
    JMP MDSP_DIS
MDSP_5:    CMPI.B #$0C,D3
    BGT MDSP_5RANGE
    JSR CONV_5
    MOVE.L D7,A5
    MOVE.L A5,A6
    ADD.L #$0F,A6
    JMP MDSP_DIS
MDSP_5RANGE:    ADDQ #6,A1
    CMPI.B #$24,(A1)+
    BEQ GET_NEXT_ADDR5
    JMP MDSP_INVALID 
GET_NEXT_ADDR5:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5     
    MOVE.L D7,A5
    MOVE.L D6,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_5
    MOVE.L D7,A6      
MDSP_DIS: MOVE.L A5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.B (A5)+,D1
    MOVE.B #16,D2
    MOVE.B #15,D0
    TRAP #15
    LEA SPACE,A1
    JSR DISPCR
    CMP.L A5,A6
    BGE MDSP_DIS
    JMP MDSP_END
MDSP_INVALID:   LEA INVALID_MSG,A1
    JSR DISPCR
MDSP_END:   MOVEM.L (SP)+,D0-D7/A0-A6
    RTS
        
SORTW:
    MOVEM.L D0-D7/A0-A6,-(SP)
    ADDQ #6,A1
    MOVEQ #0,D4
    CMPI.B #$24,(A1)+
    BEQ SORTW_NEXT
    JMP SORTW_INVALID
SORTW_NEXT: JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ SORTW_DIGITS3
    CMPI.B #$04,D4
    BEQ SORTW_DIGITS4
    CMPI.B #$05,D4
    BEQ SORTW_DIGITS5
SORTW_DIGITS3: ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ SORTW_NEXT_1
    JMP SORTW_INVALID
SORTW_NEXT_1:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.W #0,D6
    BEQ GET_NEXTADDR_3
    JMP SORTW_INVALID 
GET_NEXTADDR_3:  ADDQ #5,A1
    JSR CONV_3
    MOVE.W D6,A6
    MOVE.L A6,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.W #0,D6
    BEQ SORTW_SETUP
    JMP SORTW_INVALID 
SORTW_DIGITS4:  ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ SORTW_NEXT_2
    JMP SORTW_INVALID
SORTW_NEXT_2:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4     
    MOVE.L D7,A5
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.W #0,D6
    BEQ GET_NEXTADDR_4
    JMP SORTW_INVALID 
GET_NEXTADDR_4:    ADDQ #6,A1
    JSR CONV_4
    MOVE.L D7,A6
    MOVE.L A6,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.W #0,D6
    BEQ SORTW_SETUP
    JMP SORTW_INVALID 
SORTW_DIGITS5:  ADDQ #6,A1
    CMPI.B #$24,(A1)+
    BEQ SORTW_NEXT_3
    JMP SORTW_INVALID
SORTW_NEXT_3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5     
    MOVE.L D7,A5
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    CMPI.W #0,D6
    BEQ GET_NEXTADDR_5
    JMP SORTW_INVALID 
GET_NEXTADDR_5:    ADDQ #7,A1
    JSR CONV_5
    MOVE.L D7,A6
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    CMPI.W #0,D6
    BEQ SORTW_SETUP
    JMP SORTW_INVALID 
SORTW_SETUP:  CMPI.B #$06,D4
    BEQ SORTW_DIGITS3_1
    CMPI.B #$08,D4
    BEQ SORTW_DIGITS4_1
    CMPI.B #$0A,D4
    BEQ SORTW_DIGITS5_1
SORTW_DIGITS3_1:   ADDQ #4,A1
    CMPI.B #$44,(A1)
    BEQ GOTO_SORT_D
    CMPI.B #$41,(A1)
    BEQ GOTO_SORT_A
SORTW_DIGITS4_1:   ADDQ #5,A1
    CMPI.B #$44,(A1)
    BEQ GOTO_SORT_D
    CMPI.B #$41,(A1)
    BEQ GOTO_SORT_A
SORTW_DIGITS5_1:   ADDQ #6,A1
    CMPI.B #$44,(A1)
    BEQ GOTO_SORT_D
    CMPI.B #$41,(A1)
    BEQ GOTO_SORT_A
GOTO_SORT_D:    JSR SORTW_D 
    JMP SORTW_END
GOTO_SORT_A     JSR SORTW_A
    JMP SORTW_END
SORTW_INVALID:  LEA INVALID_MSG,A1
    JSR DISPCR
SORTW_END:  MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

MM:
     MOVEM.L D0-D7/A0-A6,-(SP)
MM_BUFF EQU $2C50
    MOVEQ #0,D4
    ADDQ #3,A1
    CMPI.B #$24,(A1)+
    BEQ MM_NEXT
    JMP MM_INVALID
MM_NEXT:  JSR GET_ADDR_ASCII  
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ MM_DIGITS3
    CMPI.B #$04,D4
    BEQ MM_DIGITS4
    CMPI.B #$05,D4
    BEQ MM_DIGITS5
MM_DIGITS3: JSR CONV_3
    MOVE.W D6,A5
    JMP MM_CHECK_3
MM_DIGITS4: JSR CONV_4
    MOVE.L D7,A5
    JMP MM_CHECK_4
MM_DIGITS5: JSR CONV_5
    MOVE.L D7,A5
    JMP MM_CHECK_5
MM_CHECK_3:   ADDQ #4,A1
    CMPI.B #$3B,(A1)+
    BEQ MM_NEXT_1
    JMP MM_INVALID
MM_CHECK_4:  ADDQ #5,A1
    CMPI.B #$3B,(A1)+
    BEQ MM_NEXT_1
    JMP MM_INVALID
MM_CHECK_5:  ADDQ #6,A1
    CMPI.B #$3B,(A1)+
    BEQ MM_NEXT_1
    JMP MM_INVALID
MM_NEXT_1:   CMPI.B #$42,(A1)
    BEQ MM_BYTE
    CMPI.B #$57,(A1)
    BEQ MM_WORD
    CMPI.B #$4C,(A1)
    BEQ MM_LONG
MM_BYTE:    MOVE.L A5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.B (A5),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA MM_BUFF,A1
    MOVE.B #2,D0
    TRAP #15
    CMPI.B #$2E,(A1)
    BEQ MM_END
    JSR GET_DATA
    SUBQ #2,A1
    JSR CONV_2
    MOVE.B D3,(A5)+
    BRA MM_BYTE
MM_WORD:    MOVE.L A5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.W (A5),D1
    JSR DISPDA
    LEA SPACE,A1
    MOVE.B #14,D0
    TRAP #15
    LEA MM_BUFF,A1
    MOVE.B #2,D0
    TRAP #15
    CMPI.B #$2E,(A1)
    BEQ MM_END
    JSR GET_DATA
    SUBQ #4,A1
    JSR CONV_4
    MOVE.W D7,(A5)+
    BRA MM_WORD
MM_LONG:    MOVE.L A5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.L (A5),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA MM_BUFF,A1
    MOVE.B #2,D0
    TRAP #15
    CMPI.B #$2E,(A1)
    BEQ MM_END
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,(A5)+
    ADDQ #4,A1
    JSR CONV_4
    MOVE.W D7,(A5)+
    BRA MM_LONG 
MM_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
MM_END: MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

MS:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #3,A1    
    CMPI.B #$24,(A1)+
    BEQ MS_NEXT
    JMP MS_INVALID
MS_NEXT:    JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ MS_3
    CMPI.B #$04,D4
    BEQ MS_4
    CMPI.B #$05,D4
    BEQ MS_5
MS_3:    JSR CONV_3
    MOVE.W D6,A5
    ADDQ #4,A1
    JMP GOTODATARX
MS_4:    JSR CONV_4
    MOVE.L D7,A5
    ADDQ #5,A1
    JMP GOTODATARX
MS_5:    JSR CONV_5
    MOVE.L D7,A5
    ADDQ #6,A1    
GOTODATARX: CMPI.B #$12,D3
    BGT PUT_ASCII     
    JSR GET_DATA
    CMPI.B #$02,D2
    BEQ MS_BYTE
    CMPI.B #$04,D2
    BEQ MS_WORD
    CMPI.B #$08,D2
    BEQ MS_LONG
MS_BYTE: SUBQ #2,A1
    JSR CONV_2
    MOVE.B D3,(A5)
    JMP MS_END
MS_WORD: SUBQ #4,A1
    JSR CONV_4
    MOVE.W D7,(A5)
    JMP MS_END
MS_LONG: SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,(A5)+
    ADDQ #4,A1
    JSR CONV_4
    MOVE.W D7,(A5)
    JMP MS_END
PUT_ASCII:  MOVE.B (A1)+,(A5)+
    CMPI.B #$00,(A1)
    BNE PUT_ASCII
    MOVE.B #$00,(A5)
    JMP MS_END
MS_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
MS_END: MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

BF:
    MOVEM.L D0-D7/A0-A6,-(SP)
    ADDQ #3,A1  
    MOVEQ #0,D4
    CMPI.B #$24,(A1)+
    BEQ BF_NEXT
    JMP BF_INVALID  
BF_NEXT:    JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ BF_DIGITS3
    CMPI.B #$04,D4
    BEQ BF_DIGITS4
    CMPI.B #$05,D4
    BEQ BF_DIGITS5
BF_DIGITS3: ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ BFNEXT1
    JMP BF_INVALID
BFNEXT1:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.B #$00,D6
    BEQ GET_NEXT_ADDR_3
    JMP BF_INVALID 
GET_NEXT_ADDR_3:    ADD.L D2,A1
    ADDQ #3,A1
    JSR CONV_3
    MOVE.W D6,A6
    MOVE.L A6,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.B #$00,D6
    BEQ BF_SKIP_3DIG
    JMP BF_INVALID 
BF_DIGITS4: ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BFNEXT2
    JMP BF_INVALID
BFNEXT2:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4     
    MOVE.L D7,A5
    MOVE.L A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI #0,D6
    BEQ GET_NEXT_ADDR_4
    JMP BF_INVALID 
GET_NEXT_ADDR_4:    ADD.L D2,A1
    ADDQ #4,A1
    JSR CONV_4
    MOVE.L D7,A6
    MOVE.L A6,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI #0,D6
    BEQ BF_SKIP_4DIG
    JMP BF_INVALID 
BF_DIGITS5: ADDQ #6,A1
    CMPI.B #$24,(A1)+
    BEQ BFNEXT3
    JMP BF_INVALID
BFNEXT3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5     
    MOVE.L D7,A5
    MOVE.W A5,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.B #$00,D6
    BEQ GET_NEXT_ADDR_5
    JMP BF_INVALID 
GET_NEXT_ADDR_5:    ADD.L D2,A1
    ADDQ #5,A1
    JSR CONV_5
    MOVE.L D7,A6
    MOVE.W A6,D6
    MOVEQ #2,D2
    DIVU D2,D6
    SWAP.W D6
    CMPI.B #$00,D6
    BEQ BF_SKIP_5DIG
    JMP BF_INVALID 
BF_SKIP_5DIG:    ADDQ #6,A1
    JSR GET_DATA
    SUBQ #4,A1
    JSR CONV_4
    JMP BFAG
BF_SKIP_4DIG:    ADDQ #5,A1
    JSR GET_DATA
    SUBQ #4,A1
    JSR CONV_4
    JMP BFAG
BF_SKIP_3DIG:  ADDQ #4,A1
    JSR GET_DATA
    SUBQ #4,A1
    JSR CONV_4
BFAG:    MOVE.W D7,(A5)+
    CMP.L A6,A5
    BLE BFAG
    JMP BF_END
BF_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
BF_END:    MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

BTST:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BTST_NEXT
    JMP BTST_INVALID
BTST_NEXT: JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ BTST_DIGITS3
    CMPI.B #$04,D4
    BEQ BTST_DIGITS4
    CMPI.B #$05,D4
    BEQ BTST_DIGITS5
BTST_DIGITS3: ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ BTST_NEXT_1
    JMP BTST_INVALID
BTST_NEXT_1:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    MOVE.L D6,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_3
    MOVE.W D6,A6
    JMP BTST_BEG
BTST_DIGITS4: ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BTST_NEXT_2
    JMP BTST_INVALID
BTST_NEXT_2:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4     
    MOVE.L D7,A5
    MOVE.L D7,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_4
    MOVE.L D7,A6
    JMP BTST_BEG
BTST_DIGITS5: ADDQ #6,A1
    CMPI.B #$24,(A1)+
    BEQ BTST_NEXT_3
    JMP BTST_INVALID
BTST_NEXT_3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5     
    MOVE.L D7,A5
    MOVE.L D7,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_5
    MOVE.L D7,A6
BTST_BEG:   MOVE.B #$FF,(A5)+
    CMP.L A5,A6
    BGE BTST_BEG
    MOVE.L D5,A5
BTST_READ:    MOVE.B (A5)+,D0
    CMPI.B #$FF,D0
    BEQ BTST_READ_CONTINUE
    JMP BTST_ERR
BTST_READ_CONTINUE: CMP.L A5,A6 
    BGE BTST_READ    
    JMP BTST_NOERR
BTST_NOERR: MOVE.L D5,A5
BTSTSET:    MOVE.B #$00,(A5)+
    CMP.L A5,A6
    BGE BTSTSET
    LEA BTSTMSG_1,A1
    JSR DISPCR
    JMP BTST_END    
BTST_ERR:   LEA BTSTMSG_2,A1
    JSR DISPCR
    LEA BTSTMSG_5,A1
    JSR DISP
    CLR.L D1
    SUBQ #1,A5
    MOVE.L A5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA BTSTMSG_4,A1
    JSR DISP
    CLR.L D1
    MOVE.B (A5),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA BTSTMSG_3,A1
    JSR DISP
    CLR.L D1
    MOVE.B #$FF,D1
    JSR DISPDA
    JMP BTST_END    
BTST_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
BTST_END:   MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

BMOV:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BMOV_NEXT
    JMP BMOV_INVALID
BMOV_NEXT:  JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ BMOV_DIGITS3
    CMPI.B #$04,D4
    BEQ BMOV_DIGITS4
    CMPI.B #$05,D4
    BEQ BMOV_DIGITS5
BMOV_DIGITS3: ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ BMOV_NEXT_1
    JMP BMOV_INVALID
BMOV_NEXT_1:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_3
    MOVE.W D6,A6
    JMP GETNOOFBYTES
BMOV_DIGITS4: ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BMOV_NEXT_2
    JMP BMOV_INVALID
BMOV_NEXT_2:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4     
    MOVE.L D7,A5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_4
    MOVE.L D7,A6
    JMP GETNOOFBYTES
BMOV_DIGITS5:   ADDQ #6,A1
    CMP.B #$24,(A1)+
    BEQ BMOV_NEXT_3
    JMP BMOV_INVALID
BMOV_NEXT_3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5     
    MOVE.L D7,A5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_5
    MOVE.L D7,A6
GETNOOFBYTES:   CMPI.B #$06,D4
    BEQ A1UPDATE3
    CMPI.B #$08,D4
    BEQ A1UPDATE4
    CMPI.B #$0A,D4
    BEQ A1UPDATE5
A1UPDATE3:    ADDQ #4,A1
    JSR GET_DEC
    JMP BMOV_AG
A1UPDATE4:    ADDQ #5,A1
    JSR GET_DEC
    JMP BMOV_AG
A1UPDATE5:    ADDQ #6,A1
    JSR GET_DEC
    JMP BMOV_AG
BMOV_AG:    MOVE.B (A5)+,(A6)+
    DBEQ D6,BMOV_AG
    JMP BMOV_END
BMOV_INVALID: LEA INVALID_MSG,A1
   JSR DISPCR
BMOV_END:   MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

BSCH:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BSCH_NEXT
    JMP BSCH_INVALID
BSCH_NEXT:    JSR GET_ADDR_ASCII
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ BSCH_DIGITS3
    CMPI.B #$04,D4
    BEQ BSCH_DIGITS4
    CMPI.B #$05,D4
    BEQ BSCH_DIGITS5
BSCH_DIGITS3:    ADDQ #4,A1
    CMPI.B #$24,(A1)+
    BEQ BSCH_NEXT_1
    JMP BSCH_INVALID
BSCH_NEXT_1:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_3     
    MOVE.W D6,A5
    MOVE.L D6,D7
    MOVE.L D6,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_3
    MOVE.W D6,A6
    MOVE.L D6,D7
    JMP BSCH_CHECK
BSCH_DIGITS4:    ADDQ #5,A1
    CMPI.B #$24,(A1)+
    BEQ BSCH_NEXT_2
    JMP BSCH_INVALID
BSCH_NEXT_2:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_4
    MOVE.L D7,A5
    MOVE.L D7,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_4
    MOVE.L D7,A6
    JMP BSCH_CHECK
BSCH_DIGITS5:    ADDQ #6,A1
    CMPI.B #$24,(A1)+
    BEQ BSCH_NEXT_3
    JMP BSCH_INVALID
BSCH_NEXT_3:    JSR GET_ADDR_ASCII
    SUB.L D4,A1
    SUBQ #2,A1
    JSR CONV_5    
    MOVE.L D7,A5
    MOVE.L D7,D5
    ADD.L D2,A1
    ADDQ #2,A1
    JSR CONV_5
    MOVE.L D7,A6
BSCH_CHECK: CMPI.B #$06,D4
    BEQ BSCH_DIGITS3_1
    CMPI.B #$08,D4
    BEQ BSCH_DIGITS4_1
    CMPI.B #$0A,D4
    BEQ BSCH_DIGITS5_1
BSCH_DIGITS3_1:    ADDQ #4,A1
    JMP BSCH_AG_BEG
BSCH_DIGITS4_1:    ADDQ #5,A1
    JMP BSCH_AG_BEG
BSCH_DIGITS5_1:    ADDQ #6,A1
BSCH_AG_BEG:   MOVEQ #0,D6 
GET_LENGTH:    ADDQ #1,D6
    CMPI.B #$00,(A1)+
    BNE GET_LENGTH
    CMPI.B #$FF,(A1)
    BEQ BSCH_PROCEED
    BRA GET_LENGTH
BSCH_PROCEED:    SUB.L D6,A1
    SUBQ #1,D6
BSCH_AG:    CMP.B (A1)+,(A5)+
    BEQ BSCH_CHECK_NEXT
    SUBQ #1,A1
    ADDQ #1,D5
    CMP.L A5,A6
    BGE BSCH_AG
    JMP BSCH_NOTFOUND
BSCH_CHECK_NEXT:    SUBQ #1,D6
    CMPI.B #0,D6
    BNE BSCH_AG
    JMP BSCH_DISPLAY 
BSCH_NOTFOUND:  LEA BSCHMSG_3,A1
    JSR DISPCR
    JMP BSCH_END   
BSCH_INVALID: LEA INVALID_MSG,A1
    MOVE.B #14,D0
    TRAP #15
    JMP BSCH_END
BSCH_DISPLAY:   LEA BSCHMSG_1,A1
    JSR DISP
    MOVE.L D5,A1
    JSR DISPCR
    LEA BSCHMSG_2,A1
    JSR DISP
    MOVE.L D5,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    JMP BSCH_END
BSCH_END:    MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

GO:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #3,A1
    CMPI.B #$24,(A1)+
    BEQ GO_NEXT
    JMP GO_INVALID
GO_NEXT:    JSR GET_ADDR_ASCII    
    SUB.L D2,A1
    CMPI.B #$03,D4
    BEQ GO_3
    CMPI.B #$04,D4
    BEQ GO_4
GO_3:    JSR CONV_3
    MOVE.W D6,A5
    BSR GO_TO_ADDR
GO_4:   JSR CONV_4
    MOVE.L D7,A5
    BSR GO_TO_ADDR 
GO_TO_ADDR: MOVE.W A5,(2,SP)
    RTS
GO_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
GO_END: MOVEM.L (SP)+,D0-D7/A0-A6
    RTS
     
DF: 
    MOVEM.L D0-D7/A0-A7,-(SP)
    LEA DATAREG_0,A1
    JSR DISP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_1,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_2,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_3,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA DATAREG_4,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_5,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_6,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA DATAREG_7,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA ADDRREG_0,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_1,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_2,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_3,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA ADDRREG_4,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_5,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_6,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    LEA ADDRREG_7,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    LEA PROGCOUNT,A1
    JSR DISP
    ADD.L #$4,SP
    MOVE.L (SP),D1
    JSR DISPDA
    SUB.L #$40,SP
    LEA SPACE,A1
    JSR DISP
    LEA STATUSREG,A1
    JSR DISP
    MOVE.W SR,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0-D7/A0-A7
    RTS
    
RM:
    ADDQ #3,A1
    CMPI.B #$2E,(A1)+
    BEQ RM_NEXT
    JMP RM_INVALID
RM_NEXT:    CMPI.B #$44,(A1)
    BEQ DRM
    JMP RM_INVALID
DRM:  ADDQ #1,A1  
    CMPI.B #$30,(A1)
    BEQ D0RM
    CMPI.B #$31,(A1)
    BEQ D1RM
    CMPI.B #$32,(A1)
    BEQ D2RM
    CMPI.B #$33,(A1)
    BEQ D3RM
    CMPI.B #$34,(A1)
    BEQ D4RM
    CMPI.B #$35,(A1)
    BEQ D5RM
    CMPI.B #$36,(A1)
    BEQ D6RM
    CMPI.B #$37,(A1)
    BEQ D7RM
    CMPI.B #$38,(A1)
    BGE RM_INVALID
D0RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D0
    JMP RM_END
D1RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D1
    JMP RM_END
D2RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D2
    JMP RM_END
D3RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D3
    JMP RM_END
D4RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D4
    JMP RM_END
D5RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D5
    JMP RM_END
D6RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    JMP RM_END
D7RM:   ADDQ #2,A1
    JSR GET_DATA
    SUBQ #8,A1
    JSR CONV_4
    MOVE.W D7,D6
    SWAP.W D6
    ADDQ #4,A1
    JSR CONV_4
    CLR.W D6
    MOVE.W D7,D6
    MOVE.L D6,D7
    JMP RM_END
RM_INVALID: LEA INVALID_MSG,A1
    JSR DISPCR
RM_END: RTS

DCON:
    MOVEM.L D0-D7/A0-A6,-(SP)
    MOVEQ #0,D4
    ADDQ #5,A1
    CMPI.B #$44,(A1)
    BEQ DECTOHEX
    CMPI.B #$48,(A1)
    BEQ HEXTODEC
    JMP DCON_INVALID
DECTOHEX:   ADDQ #1,A1
    JSR GET_DEC
    LEA DCONMSG_2,A1
    JSR DISP
    MOVE.L D6,D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    JMP DCON_END
HEXTODEC:   ADDQ #1,A1 
    JSR GET_DATA 
    CMPI.B #$03,D2
    BEQ HEX2
    CMPI.B #$04,D2
    BEQ HEX3
    CMPI.B #$05,D2
    BEQ HEX4
    CMPI.B #$06,D2
    BEQ HEX5
HEX2:   SUB.L D2,A1
    JSR CONV_2
    MOVE.L D3,D7
    JMP DCON_DISPLAYD   
HEX3:   SUB.L D2,A1
    JSR CONV_3
    MOVE.L D6,D7
    JMP DCON_DISPLAYD
HEX4:   SUB.L D2,A1
    JSR CONV_4
    JMP DCON_DISPLAYD
HEX5:   SUB.L D2,A1
    JSR CONV_5
DCON_DISPLAYD:   LEA DCONMSG_1,A1
    JSR DISP
    MOVE.L D7,D1
    MOVE.B #10,D2
    MOVE.B #15,D0
    TRAP #15
    LEA SPACE,A1
    JSR DISPCR
    JMP DCON_END
DCON_INVALID:   LEA INVALID_MSG,A1
    JSR DISPCR
DCON_END:   MOVEM.L (SP)+,D0-D7/A0-A6
    RTS

EXIT:
    LEA SPACE,A1
    JSR DISPCR
    LEA EXITMSG,A1
    JSR DISP
    MOVE.B #9,D0
    TRAP #15
    RTS

DISPCR:
    MOVEM.L D0,-(SP)
    MOVE.B #13,D0
    TRAP #15
    MOVEM.L (SP)+,D0
    RTS
 
DISP:  
    MOVEM.L D0,-(SP)
    MOVE.B #14,D0
    TRAP #15
    MOVEM.L (SP)+,D0
    RTS
    
DISPDA:
    MOVEM.L D0/D2,-(SP)
    MOVE.B #16,D2
    MOVE.B #15,D0
    TRAP #15
    MOVEM.L (SP)+,D0/D2
    RTS

GET_DATA:
    MOVEM.L D0/D1/D3-D7/A2-A6,-(SP)
    MOVEQ #$30,D0
    MOVEQ #$31,D1
    MOVEQ #0,D2
DATA_CHECK_2:    CMPI.B #$39,(A1)
    BGT DATA_RPT_31_2
DATA_RPT_30_2:    SUB.B D0,(A1)+
    ADDI #1,D2
    JMP DATA_RECHECK
DATA_RPT_31_2:    SUB.B D1,(A1)+
    ADDI #1,D2
    SUBQ #1,A1
    CMP.B #$10,(A1)
    BEQ DATA_NEXT10_2
    CMP.B #$11,(A1)
    BEQ DATA_NEXT11_2
    CMP.B #$12,(A1)
    BEQ DATA_NEXT12_2
    CMP.B #$13,(A1)
    BEQ DATA_NEXT13_2
    CMP.B #$14,(A1)
    BEQ DATA_NEXT14_2
    CMP.B #$15,(A1)
    BEQ DATA_NEXT15_2
   
DATA_NEXT10_2:    MOVE.B #10,(A1)+
    JMP DATA_RECHECK
DATA_NEXT11_2:    MOVE.B #11,(A1)+
    JMP DATA_RECHECK
DATA_NEXT12_2:    MOVE.B #12,(A1)+
    JMP DATA_RECHECK
DATA_NEXT13_2:    MOVE.B #13,(A1)+
    JMP DATA_RECHECK
DATA_NEXT14_2:    MOVE.B #14,(A1)+
    JMP DATA_RECHECK
DATA_NEXT15_2:    MOVE.B #15,(A1)+
    JMP DATA_RECHECK   
DATA_RECHECK:  CMPI.B #$00,(A1)
    BNE DATA_CHECK_2
    MOVEM.L (SP)+,D0/D1/D3-D7/A2-A6 
    RTS
    
GET_ADDR_ASCII:
    MOVEM.L D0/D3/D5-D7/A2-A6,-(SP)
    MOVEQ #$30,D0
    MOVEQ #$31,D1
    MOVEQ #0,D2
ASCII_CHECK_2:    CMPI.B #$39,(A1)
    BGT ASCII_RPT_31_2
ASCII_RPT_30_2:    SUB.B D0,(A1)+
    ADDQ #1,D2
    ADDQ #1,D4
    CMPI.B #$20,(A1)
    BNE ASCII_CHECK_2
    JMP ASCII_NEXT1_2
ASCII_RPT_31_2:    SUB.B D1,(A1)+
    ADDQ #1,D2
    ADDQ #1,D4
    SUBQ #1,A1
    CMP.B #$10,(A1)
    BEQ ASCII_NEXT10_2
    CMP.B #$11,(A1)
    BEQ ASCII_NEXT11_2
    CMP.B #$12,(A1)
    BEQ ASCII_NEXT12_2
    CMP.B #$13,(A1)
    BEQ ASCII_NEXT13_2
    CMP.B #$14,(A1)
    BEQ ASCII_NEXT14_2
    CMP.B #$15,(A1)
    BEQ ASCII_NEXT15_2
ASCII_NEXT10_2:    MOVE.B #10,(A1)+
    JMP ASCII_31_2
ASCII_NEXT11_2:    MOVE.B #11,(A1)+
    JMP ASCII_31_2
ASCII_NEXT12_2:    MOVE.B #12,(A1)+
    JMP ASCII_31_2
ASCII_NEXT13_2:    MOVE.B #13,(A1)+
    JMP ASCII_31_2
ASCII_NEXT14_2:    MOVE.B #14,(A1)+
    JMP ASCII_31_2
ASCII_NEXT15_2:    MOVE.B #15,(A1)+
    JMP ASCII_31_2    
ASCII_31_2:  CMPI.B #$20,(A1)
    BNE ASCII_CHECK_2
    JMP ASCII_NEXT1_2
ASCII_NEXT1_2: MOVEM.L (SP)+,D0/D3/D5-D7/A2-A6 
    RTS
    
CONV_2:
    MOVEM.L D0-D2/D4/A0-A6,-(SP)
    MOVE.L #16,D0
    MOVEQ #1,D1
    CLR.L D2
    CLR.L D3
    MOVE.B (A1)+,D2
    MOVE.B (A1)+,D3
    MULS.W D0,D2
    MULS.W D1,D3
    ADD.W D2,D3
    MOVEM.L (SP)+,D0-D2/D4/A0-A6
    RTS    
    
CONV_3:
    MOVEM.L D0-D5/A0-A6,-(SP)
CONV_3_BEG:    MOVE.L #256,D0
    MOVEQ #16,D1
    MOVEQ #1,D2
    CLR.L D4
    CLR.L D5
    CLR.L D6
    MOVE.B (A1)+,D4
    MOVE.B (A1)+,D5
    MOVE.B (A1)+,D6
    MULS.W D0,D4
    MULS.W D1,D5
    MULS.W D2,D6
    ADD.W D4,D5
    ADD.W D5,D6
CONV_3_END:    MOVEM.L (SP)+,D0-D5/A0-A6
    RTS
    
CONV_4:
    MOVEM.L D0-D6/A0-A6,-(SP)
CONV_4_BEG:    MOVE.L #4096,D0
    MOVE.L #256,D1
    MOVEQ #16,D2
    MOVEQ #1,D3
    CLR.L D4
    CLR.L D5
    CLR.L D6
    CLR.L D7
    MOVE.B (A1)+,D4
    MOVE.B (A1)+,D5
    MOVE.B (A1)+,D6
    MOVE.B (A1)+,D7
    MULS.W D0,D4
    MULS.W D1,D5
    MULS.W D2,D6
    MULS.W D3,D7
    ADD.W D4,D5
    ADD.W D5,D6
    ADD.W D6,D7
CONV_4_END:    MOVEM.L (SP)+,D0-D6/A0-A6
    RTS
    
CONV_5:
    MOVEM.L D0-D6/A0-A6,-(SP)
CONV_5_BEG:    MOVE.L #65536,D0
    MOVE.L #4096,D1
    MOVE.L #256,D2
    MOVEQ #16,D3
    CLR.L D4
    CLR.L D5
    CLR.L D6
    CLR.L D7
    MOVE.B (A1)+,D4
    MOVE.B (A1)+,D5
    MOVE.B (A1)+,D6
    MOVE.B (A1)+,D7
    SWAP.W D0
    MULS.W D0,D4
    SWAP.W D4
    MULS.W D1,D5
    MULS.W D2,D6
    MULS.W D3,D7
    ADD.L D4,D5
    ADD.L D5,D6
    ADD.L D6,D7
    CLR.L D4
    MOVE.B (A1),D4
    MOVEQ #1,D0
    MULS.W D0,D4
    ADD.L D4,D7
CONV_5_END:    MOVEM.L (SP)+,D0-D6/A0-A6
    RTS
    
SORTW_D:
    MOVEM D0-D7/A0-A6,-(SP)    
    MOVE.L A5,A2
D_SORT_AG:    MOVE.L A2,A5
D_CMP_CONTINUE:    CMP.W (A5)+,(A5)+
    BHI D_PERFORM_SWAP
    SUBQ.L #2,A5
    CMP.L A5,A6
    BNE D_CMP_CONTINUE
    JMP SORTW_D_END
D_PERFORM_SWAP:   MOVE.L -(A5),D0
    SWAP.W D0
    MOVE.L D0,(A5)
    BRA D_SORT_AG
SORTW_D_END:     MOVEM (SP)+,D0-D7/A0-A6 
    RTS
    
SORTW_A:
    MOVEM D0-D7/A0-A6,-(SP)    
    MOVE.L A5,A2
A_SORT_AG:    MOVE.L A2,A5
A_CMP_CONTINUE:    CMP.W (A5)+,(A5)+
    BCS A_PERFORM_SWAP
    SUBQ.L #2,A5
    CMP.L A5,A6
    BNE A_CMP_CONTINUE
    JMP SORTW_A_END
A_PERFORM_SWAP:   MOVE.L -(A5),D0
    SWAP.W D0
    MOVE.L D0,(A5)
    BRA A_SORT_AG
SORTW_A_END:     MOVEM (SP)+,D0-D7/A0-A6 
    RTS

GET_DEC:
    MOVEM.L D0-D5/A0-A6,-(SP)
    MOVEQ #$30,D0
    SUB.B D0,(A1)+
    SUB.B D0,(A1)+
    SUB.B D0,(A1)
    SUBQ #2,A1
    MOVE.L #100,D0
    MOVEQ #10,D1
    MOVEQ #1,D2
    CLR.L D4
    CLR.L D5
    CLR.L D6
    MOVE.B (A1)+,D4
    MOVE.B (A1)+,D5
    MOVE.B (A1)+,D6
    MULS.W D0,D4
    MULS.W D1,D5
    MULS.W D2,D6
    ADD.W D4,D5
    ADD.W D5,D6
    MOVEM.L (SP)+,D0-D5/A0-A6
    RTS
    
ADDR_ERR:
    MOVEM.L D0-D2/A1,-(SP)
    LEA AERR_MSG,A1
    JSR DISPCR
    MOVE.L (18,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.W (22,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.W (24,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    JSR DF
    ADD.L #$1E,SP
    BRA MAIN
    
BUS_ERR:
    MOVEM.L D0-D2/A1,-(SP)
    LEA BERR_MSG,A1
    JSR DISPCR
    MOVE.L (18,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.W (22,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISP
    CLR.L D1
    MOVE.W (24,SP),D1
    JSR DISPDA
    LEA SPACE,A1
    JSR DISPCR
    JSR DF
    ADD.L #$1E,SP
    BRA MAIN
    
IL_INST:
    MOVEM.L D0/A1,-(SP)
    LEA ILLERR_MSG,A1
    JSR DISPCR
    JSR DF
    MOVEM.L (SP)+,D0/A1
    BRA MAIN

DIV_Z:
    MOVEM.L D0/A1,-(SP)
    LEA DIVZERR_MSG,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    JSR DF
    BRA MAIN

CHK_INST:
    MOVEM.L D0/A1,-(SP)
    LEA CHKERR_MSG,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    JSR DF
    BRA MAIN

PRI_VIO:
    MOVEM.L D0/A1,-(SP)
    LEA PRIVERR_MSG,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    JSR DF
    BRA MAIN

LINE_A:
    MOVEM.L D0/A1,-(SP)
    LEA LINEAERR_MSG,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    JSR DF
    BRA MAIN

LINE_F:
    MOVEM.L D0/A1,-(SP)
    LEA LINEFERR_MSG,A1
    JSR DISPCR
    MOVEM.L (SP)+,D0/A1
    JSR DF
    BRA MAIN
       
START: 
    LEA STACK,A7
    MOVE.L #BUS_ERR,$8
    MOVE.L #ADDR_ERR,$C   
    MOVE.L #IL_INST,$10
    MOVE.L #DIV_Z,$14
    MOVE.L #CHK_INST,$18
    MOVE.L #PRI_VIO,$20
    MOVE.L #LINE_A,$28
    MOVE.L #LINE_F,$2C
    BRA MAIN
    
MAIN:
    LEA SPACE,A1
    JSR DISPCR
    LEA PROMPT,A1
    JSR DISP
    LEA IP_BUFFER,A1
    MOVE.B #2,D0
    TRAP #15
    MOVE.L D1,D3
    MOVEQ #0,D0
    MOVEQ #0,D1
    MOVEQ #0,D2
    LEA A2ADDRS,A2
    LEA CMDTABLE,A4
    LEA CMDADDRS,A5
RPT:    CMP.B #$20,(A1)
    BEQ CHECK
    MOVE.B (A1)+,(A2)+
    BRA RPT
CHECK:    CMPI.B #$0D,D2
    BGT MAIN_INVALID    
    LEA A2ADDRS,A2
    MOVE.W (A4,D0),D4
    CMP.W (A2),D4
    BEQ NEXT
    ADDI #6,D0
    ADDI #1,D1 
    ADDI #1,D2         
    BRA CHECK
NEXT:   LEA IP_BUFFER,A1   
    ADD.W D1,A5
    MOVE.W (A5,D1),A6                       
    JSR (A6)
    JMP RERUN_UNTIL_EXIT 
MAIN_INVALID:   LEA INVALID_MSG,A1
    JSR DISPCR
RERUN_UNTIL_EXIT:     MOVEQ #0,D2
    MOVEQ #0,D4
    BRA MAIN
    
    
**************************************************************** 
   
*-----ADDRESS ERROR--------*    
    ORG $9000
AERR_TEST:    
    MOVE.L #$FFFF,D2
    LEA $2001,A2
    MOVE.L D2,(A2)


*-----LINE A EMULATOR--------*
    ORG $9020
LINEA_TEST: 
    DC.W $A000
  

*-----LINE F EMULATOR--------*  
    ORG $9030
LINEF_TEST:
    DC.W $F000
    

*-----CHK INSTRUCTION--------* 
    ORG $9040
CHKERR_TEST:
    MOVE.W #$3000,D6
    MOVE.W #$3010,D7
    CHK.W D6,D7


*------DIVZERO ERROR-------*
    ORG $9060
DIVZERR_TEST:
    MOVE.B #$00,D0
    MOVE.B #$FF,D1
    DIVU.W D0,D1


*------ILLEGAL INSTRUCTION------*
    ORG $9070
ILL_TEST:
    DC.W $4AFA


*----PRIVILEGE VIOLATION---* 
    ORG $9080
PRIV_TEST:    
    ANDI.W #0700,SR
    BRA PRIV_TEST

    
*-----BUS ERROR--------*
    ORG $9100
BERR_TEST:
    LEA $A00004,A2
    MOVE.L #$1234,(A2)


****************************************************************   

    ORG $9200
USERPROG:
    LEA GOMSG,A1
    JSR DISPCR
    BRA MAIN
   
    END START


























*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
